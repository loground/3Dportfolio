/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: abhie18 (https://sketchfab.com/abhie18)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/hearthstone-card-c16dd61e5bd14ac893be475fd8101c24
Title: Hearthstone Card
*/

import React, { useRef, useEffect, useMemo } from 'react';
import { Float, useGLTF } from '@react-three/drei';
import { useTexture } from '@react-three/drei';
import * as THREE from 'three';

export function HScard({ textureUrl, position, rotation }) {
  const { nodes, materials } = useGLTF('/3d/newPosHS.glb');
  const texture = useTexture(textureUrl);

  useEffect(() => {
    texture.wrapS = THREE.RepeatWrapping;
    texture.wrapT = THREE.RepeatWrapping;
    texture.offset.set(0.5, 0.5);
    texture.repeat.set(0.025, 0.015);
    texture.needsUpdate = true;
  }, [texture]);

  const material = useMemo(() => new THREE.MeshBasicMaterial({ map: texture }), [texture]);

  const shape = useMemo(() => {
    const width = 40.5;
    const height = 65;
    const radius = 5;
    const s = new THREE.Shape();
    s.moveTo(-width / 2 + radius, -height / 2);
    s.lineTo(width / 2 - radius, -height / 2);
    s.quadraticCurveTo(width / 2, -height / 2, width / 2, -height / 2 + radius);
    s.lineTo(width / 2, height / 2 - radius);
    s.quadraticCurveTo(width / 2, height / 2, width / 2 - radius, height / 2);
    s.lineTo(-width / 2 + radius, height / 2);
    s.quadraticCurveTo(-width / 2, height / 2, -width / 2, height / 2 - radius);
    s.lineTo(-width / 2, -height / 2 + radius);
    s.quadraticCurveTo(-width / 2, -height / 2, -width / 2 + radius, -height / 2);
    return s;
  }, []);

  const geometry = useMemo(
    () => new THREE.ExtrudeGeometry(shape, { depth: 1, bevelEnabled: false }),
    [shape],
  );

  return (
    <Float speed={0.3} rotationIntensity={0.5} floatIntensity={3}>
      <group position={position} rotation={rotation} scale={0.004} dispose={null}>
        <mesh geometry={geometry} position={[0, -30, -2]} rotation={[0.001, Math.PI, 0]} scale={13}>
          <primitive object={material} attach="material" />
        </mesh>
        <group>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.back_back_0.geometry}
            material={materials.back}
            position={[0, 0, -1.375]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Connect_ring_0.geometry}
            material={materials.ring}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.nails_nails_0.geometry}
            material={materials.nails}
            position={[0, 0, 7.871]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Polygon_Mat_0.geometry}
            material={materials.material}
            position={[0, 0, 17.683]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Polygon_1_Mat_0.geometry}
            material={materials.material}
            position={[0, 0, 17.683]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.sphere_Sphere_0.geometry}
            material={materials.Sphere}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.spikes_shade_glow_0.geometry}
            material={materials.shade_glow}
          />
        </group>
      </group>
    </Float>
  );
}

useGLTF.preload('/3d/newPosHS.glb');

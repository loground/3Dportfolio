/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: abhie18 (https://sketchfab.com/abhie18)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/hearthstone-card-c16dd61e5bd14ac893be475fd8101c24
Title: Hearthstone Card
*/

import React, { useState, useEffect, useMemo } from 'react';
import { Float, Html, useGLTF } from '@react-three/drei';
import { useTexture } from '@react-three/drei';
import * as THREE from 'three';
import { useSpring, a } from '@react-spring/three';
import { useBrainScene } from '../Context';

export function HScard({ textureUrl, position, rotation, index }) {
  const { nodes, materials } = useGLTF('/3d/newPosHS.glb');
  const texture = useTexture(textureUrl);
  const [hovered, setHovered] = useState(false);

  const { selectedCard, setSelectedCard } = useBrainScene();
  const isSelected = selectedCard === index;

  const SELECTED_POSITION = [-6, 1, -3];
  const UNSELECTED_POSITION = [0, -10, 3];
  const SELECTED_ROTATION = [rotation[0] - 0.3, rotation[1], rotation[2] - 0.1];

  const { animatedPosition, animatedRotation } = useSpring({
    delay: isSelected && hovered && 1200,

    animatedPosition:
      selectedCard === null
        ? hovered
          ? [position[0], position[1] + 1.5, position[2] + 1]
          : position
        : isSelected
          ? SELECTED_POSITION
          : UNSELECTED_POSITION,

    animatedRotation: hovered
      ? [
          SELECTED_ROTATION[0] + (isSelected ? 0.2 : 0),
          SELECTED_ROTATION[1] + Math.PI * 2,
          SELECTED_ROTATION[2] + (isSelected ? 0.1 : 0),
        ]
      : isSelected
        ? SELECTED_ROTATION
        : rotation,

    config: { mass: 3, tension: 10, friction: 10 },
  });

  useEffect(() => {
    texture.wrapS = THREE.RepeatWrapping;
    texture.wrapT = THREE.RepeatWrapping;
    texture.offset.set(0.5, 0.5);
    texture.repeat.set(0.02, 0.013);
    texture.colorSpace = THREE.SRGBColorSpace;

    texture.needsUpdate = true;
  }, [texture]);

  const material = useMemo(() => {
    return new THREE.MeshStandardMaterial({
      map: texture,
    });
  }, [texture]);

  const shape = useMemo(() => {
    const width = 46;
    const height = 76;
    const radius = 10;
    const s = new THREE.Shape();
    s.moveTo(-width / 2 + radius, -height / 2);
    s.lineTo(width / 2 - radius, -height / 2);
    s.quadraticCurveTo(width / 2, -height / 2, width / 2, -height / 2 + radius);
    s.lineTo(width / 2, height / 2 - radius);
    s.quadraticCurveTo(width / 2, height / 2, width / 2 - radius, height / 2);
    s.lineTo(-width / 2 + radius, height / 2);
    s.quadraticCurveTo(-width / 2, height / 2, -width / 2, height / 2 - radius);
    s.lineTo(-width / 2, -height / 2 + radius);
    s.quadraticCurveTo(-width / 2, -height / 2, -width / 2 + radius, -height / 2);
    return s;
  }, []);

  const geometry = useMemo(
    () => new THREE.ExtrudeGeometry(shape, { depth: 0, bevelEnabled: false }),
    [shape],
  );

  return (
    <Float speed={0.3} rotationIntensity={0.5} floatIntensity={3}>
      {isSelected && (
        <a.group position={[-4, -2.5, -1]} rotation={[0, 0, 0.05]}>
          <Html
            transform
            distanceFactor={2}
            style={{
              background: 'rgba(0, 0, 0, 0.6)',
              padding: '1em',
              borderRadius: '10px',
              color: 'white',
              fontSize: '3em',
              maxWidth: '700px',
              lineHeight: '1.4',
              transition: 'opacity 0.4s ease',
            }}>
            {index === 0 && (
              <p>
                <p>me & wife created arts for:</p>
                <ul className="grid grid-cols-2 gap-x-4 list-none font-bold p-0 m-0">
                  <li>
                    <a
                      className="text-purple-400"
                      href="https://opensea.io/item/ethereum/0x12f32e9c86acc6a39eddfcb978013780c66ee0ad/19"
                      target="_blank"
                      rel="noreferrer">
                      cryptobatz
                    </a>
                  </li>
                  <li>
                    <a
                      className="text-green-400"
                      href="https://pepe.wtf/artists/loground-x-vorksee"
                      target="_blank"
                      rel="noreferrer">
                      pepe
                    </a>
                  </li>
                  <li>
                    <a
                      className="text-[#fbef08]"
                      href="https://junglebayisland.com/homeartists"
                      target="_blank"
                      rel="noreferrer">
                      junglebay
                    </a>
                  </li>
                  <li>
                    <a
                      className="text-[#0c85ff]"
                      href=" https://zora.co/collect/base:0x338da94719499060d4fe18121114fd24e8668220/1?referrer=0x2de78f2db332726bf6e45722a20e96118d3d2462"
                      target="_blank"
                      rel="noreferrer">
                      farcaster
                    </a>
                  </li>
                  <li>
                    <a
                      className="text-[#bb5b08]"
                      href="  https://opensea.io/collection/bojungless?traits=[{%22traitType%22:%22Artist%22,%22values%22:[%22loground+Dankest+Memes?+(@nickvrnn)%22]}]"
                      target="_blank"
                      rel="noreferrer">
                      bobo
                    </a>
                  </li>
                </ul>
                and many
                <a
                  className="font-bold text-orange-300"
                  href="https://www.vorkseeground.art"
                  target="_blank"
                  rel="noreferrer">
                  &nbsp; others
                </a>{' '}
              </p>
            )}
            {index === 1 && (
              <p>
                <strong>Skills:</strong> communication, marketing analysis, strategy, managing
                socials/websites, brainstorming.
              </p>
            )}
            {index === 2 && (
              <p>
                <strong>Frontend:</strong> React, tailwind, next/vite, lately big fan of of Three.js
                (r3f), react-spring/framer-motion. Getting into glsl.
              </p>
            )}
          </Html>
        </a.group>
      )}
      {isSelected && (
        <a.group position={[5, 2, -2]} rotation={[0, 0, 0]}>
          <Html
            transform
            distanceFactor={2}
            style={{
              background: 'rgba(0, 0, 0, 0.6)',
              padding: '1em',
              borderRadius: '10px',
              color: 'white',
              fontSize: '3em',
              maxWidth: '700px',
              lineHeight: '1.4',
              transition: 'opacity 0.4s ease',
            }}>
            {index === 0 && (
              <p>
                <p>also cooked websites:</p>
                <ul className="grid grid-cols-2 gap-x-4 list-none font-bold p-0 m-0">
                  <li>
                    <a
                      className="text-purple-300"
                      href="https://www.bigbrain.wtf"
                      target="_blank"
                      rel="noreferrer">
                      big brain
                    </a>
                  </li>
                  <li>
                    <a
                      className="text-white"
                      href="https://www.souljak.fun"
                      target="_blank"
                      rel="noreferrer">
                      souljak
                    </a>
                  </li>
                  <li>
                    <a
                      className="text-[#fbef08]"
                      href="https://junglebayisland.com"
                      target="_blank"
                      rel="noreferrer">
                      junglebay
                    </a>
                  </li>
                  <li>
                    <a
                      className="text-[#0c85ff]"
                      href=" www.rizzcoded.xyz"
                      target="_blank"
                      rel="noreferrer">
                      rizz
                    </a>
                  </li>
                </ul>
                <a
                  className="font-bold text-orange-300"
                  href="https://aixbtpepe.vercel.app"
                  target="_blank"
                  rel="noreferrer">
                  etc
                </a>{' '}
              </p>
            )}
            {index === 1 && (
              <p>From marketing major to small agency founder, into Web3, grants, and nft sales.</p>
            )}
            {index === 2 && (
              <p>
                Latest project:{' '}
                <a
                  className="text-green-300 font-bold"
                  href="https://fastlads.vercel.app"
                  target="_blank"
                  rel="noreferrer">
                  Fastlads
                </a>
              </p>
            )}
          </Html>
        </a.group>
      )}

      <a.group
        position={animatedPosition}
        rotation={animatedRotation}
        scale={0.004}
        onClick={() => {
          setSelectedCard(isSelected ? null : index);
        }}
        onPointerOver={() => setHovered(true)}
        onPointerOut={() => setHovered(false)}>
        <mesh
          geometry={geometry}
          position={[0, -30, -15]}
          rotation={[0.001, Math.PI, 0]}
          scale={13}>
          <primitive object={material} transparent attach="material" />
        </mesh>
        <group>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.back_back_0.geometry}
            material={materials.back}
            position={[0, 0, -1.375]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Connect_ring_0.geometry}
            material={materials.ring}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.nails_nails_0.geometry}
            material={materials.nails}
            position={[0, 0, 7.871]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Polygon_Mat_0.geometry}
            material={materials.material}
            position={[0, 0, 17.683]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Polygon_1_Mat_0.geometry}
            material={materials.material}
            position={[0, 0, 17.683]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.sphere_Sphere_0.geometry}
            material={materials.Sphere}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.spikes_shade_glow_0.geometry}
            material={materials.shade_glow}
          />
        </group>
      </a.group>
    </Float>
  );
}

useGLTF.preload('/3d/newPosHS.glb');
